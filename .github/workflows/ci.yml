name: Django CI

on:
  push:

jobs:
  ci:
    runs-on: ubuntu-20.04
    env:
      DB_HOST: 127.0.0.1
      DB_PORT: 3306
      DB_USER: root
      DB_PASSWORD: 1234
      DB_DATABASE: oz_django

    steps:
      # github action 이미지는 기본적으로 checkout이 안 되어 있습니다.
      # 우리가 ci 에서 하고자 하는 것은, 코드를 검사하는 것이기 때문에, 제일 먼저 checkout을 해줍니다.
      - name: Check out the codes
        uses: actions/checkout@v2

      - name : Setup python environment # ubuntu 20 에 python 3.12 가 없으므로 setup 해줍니다.
        id: setup-python
        uses: actions/setup-python@v2
        with:
          python-version: 3.12

        # 각 step 은 uses 혹은 run 둘 중 하나를 꼭 사용해야 합니다.
        #uses: 다른 사람이 미리 만들어놓은 action을 실행한다.

      - name: Set timezone to KST
        run: |
          sudo rm /etc/localtime
          sudo ln -s /usr/share/zoneinfo/Asia/Seoul /etc/localtime

      # Start Mysql
      # https://ovirium.com/blog/how-to-make-mysql-work-in-your-github-actions/
      - name: Start Mysql
        run: |
          sudo systemctl start mysql
          mysql -e "use mysql; FLUSH PRIVILEGES; ALTER USER '${{ env.DB_USER }}'@'localhost' IDENTIFIED BY '${{ env.DB_PASSWORD }}';" -uroot -proot
          mysql -e 'CREATE DATABASE ${{ env.DB_DATABASE }};' -u${{ env.DB_USER }} -p${{ env.DB_PASSWORD }}

      - name: Install Poetry
        run: |
          curl -sSL curl -sSL https://install.python-poetry.org | python3 -
          echo "${HOME}/.local/bin" >> $GITHUB_PATH

      - name: Install dependencies
        run: |
          poetry install

      # --check 옵션은, 파일을 수정하지 않고 파일이 black 규칙을 준수하는지 검증만 한다.
      # github action job의 기본 동적은, step이 실패할 경우에 이후 step으로 넘어가지 않습니다.
      - name: Run black
        run: |
          poetry run black . --check

      - name: Run isort
        run: |
          poetry run isort . --check --diff

      - name: Run Mypy
        run: |
          poetry run mypy .

      - name: Test python project
        run: |
          poetry run python manage.py test